{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAsCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA9CMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAUJ,IARA,IAEqBC,EAAjBF,EAAIG,cADNC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGrBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEzBG,EAAW,EAAGA,GAAYD,EAAaC,GAAY,EACzC,IAAbA,EACF1B,EAAc0B,EAAUL,GACrBM,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBJ,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE9D8B,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAA+B,OAAOI,QAAQ,sBAAuCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAGhEF,EAAc0B,EAAUL,EAAaG,GAAaE,EAAW,IAC1DC,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBJ,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE9D8B,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAA+B,OAAOI,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let position = 1; position <= amountValue; position += 1) {\n    if (position === 1) {\n      createPromise(position, delayValue)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    } else {\n      createPromise(position, delayValue + stepValue * (position - 1))\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","position1","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.a1dbeaa6.js.map"}